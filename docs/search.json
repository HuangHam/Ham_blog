[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ham_blog",
    "section": "",
    "text": "Computational modeling is a growing approach in cognitive and behavioral sciences. Computational modeling is commonly distinguished from regular statistical modeling (like linear regression, t-test) by serving as in some sense a “process model” of cognition rather than mere quantitative checks on whether an effect is legitimate. However, the boundary between a statistical model and a computational model is often quite blurry. In many usage cases, well-established frameworks of computational models function as statistical models to examine effects of certain experimental manipulations. This is especially truth in the field of learning and decision-making where a wealth of established computational models under the framework of value-based decision-making and reinforcement learning exist. However, computational modeling often require a researcher to program the models from scratch because of the lack of easily accessible packages like for linear regressions and t tests. This creates a high barriers for entry. HBayesDM is a nice package created to address this issue by packaging up a wide sort of well-validated computational models of learning and decision-making so that people can easily call on them in their research just like calling on a statistical model. Moreover, this package performs Bayesian fitting for these models. Computational models in decision-making often have unconstrained parameter space and rugged terrain of likelihood function. This makes regularization important for create interpretable parameter fits. Among other advantageous, Bayesian model fitting is a very flexible and effective way of regularization.Therefore HBayesDM is a useful package for researchers in learning decision-making to leverage decades of research in computational modeling to advance of understanding of the mechanisms behind how people (and other animals) make decisions!\nWhile there already exists many good blogs on the internet for how to use different kind of computational models supported by the package, in this blog I will focus on demonstrating the model I am personal most familiar with, which is the Rescorla-Wagner model of the 2-armed bandit task."
  },
  {
    "objectID": "index.html#what-is-hbayesdm",
    "href": "index.html#what-is-hbayesdm",
    "title": "Ham_blog",
    "section": "",
    "text": "Computational modeling is a growing approach in cognitive and behavioral sciences. Computational modeling is commonly distinguished from regular statistical modeling (like linear regression, t-test) by serving as in some sense a “process model” of cognition rather than mere quantitative checks on whether an effect is legitimate. However, the boundary between a statistical model and a computational model is often quite blurry. In many usage cases, well-established frameworks of computational models function as statistical models to examine effects of certain experimental manipulations. This is especially truth in the field of learning and decision-making where a wealth of established computational models under the framework of value-based decision-making and reinforcement learning exist. However, computational modeling often require a researcher to program the models from scratch because of the lack of easily accessible packages like for linear regressions and t tests. This creates a high barriers for entry. HBayesDM is a nice package created to address this issue by packaging up a wide sort of well-validated computational models of learning and decision-making so that people can easily call on them in their research just like calling on a statistical model. Moreover, this package performs Bayesian fitting for these models. Computational models in decision-making often have unconstrained parameter space and rugged terrain of likelihood function. This makes regularization important for create interpretable parameter fits. Among other advantageous, Bayesian model fitting is a very flexible and effective way of regularization.Therefore HBayesDM is a useful package for researchers in learning decision-making to leverage decades of research in computational modeling to advance of understanding of the mechanisms behind how people (and other animals) make decisions!\nWhile there already exists many good blogs on the internet for how to use different kind of computational models supported by the package, in this blog I will focus on demonstrating the model I am personal most familiar with, which is the Rescorla-Wagner model of the 2-armed bandit task."
  },
  {
    "objectID": "index.html#load-packages-and-data",
    "href": "index.html#load-packages-and-data",
    "title": "Ham_blog",
    "section": "Load packages and data",
    "text": "Load packages and data\n\n# precompile the models if you are a frequent use. It makes fitting models quicker\n#Sys.setenv(BUILD_ALL='true')  # Build all the models on installation\n#Sys.setenv(MAKEFLAGS='-j 4')  # Use 4 cores for compilation (or the number you want)\n# install the package\n#install.packages(\"hBayesDM\", dependencies=TRUE)\n\n\nlibrary(hBayesDM)\n\nLoading required package: Rcpp\n\n\n\n\nThis is hBayesDM version 1.2.1\n\n#load the example bandit task data\ndataPath = system.file(\"extdata/bandit2arm_exampleData.txt\", package=\"hBayesDM\")\ndf = read.table(dataPath, header = TRUE)\n# Remove NA's if there is NA data."
  },
  {
    "objectID": "index.html#what-is-a-2-armed-bandit-task",
    "href": "index.html#what-is-a-2-armed-bandit-task",
    "title": "Ham_blog",
    "section": "What is a 2-armed bandit task?",
    "text": "What is a 2-armed bandit task?\nA 2-armed bandit task is the simplest and most classic set up for the study of reinforcement learning in humans. Reinforcement learning refers to the ability to learn from rewards. In other words, people will be able to learn overtime which action yields more reward and increase their frequencies of taking that action. In a 2-armed bandit task, there are 2 possible actions to take. Each action corresponding to playing an imaginary bandit machine once. A bandit machine is kind of casino machine that probabilistically spit out reward each time you play it. By playing it I mean pulling the lever or pressing a key on the key board. In sum, the set up is quite simple. For each participant, there are two options (or two keys to press if you will). At each trial, they can press one of the two keys. Each time they do so, they will either get an reward, or loss a reward. They do so for 100 times. The data has 4 variables:\n\nsubjID: The participant’s id\ntrial: which trial\nchoice: the key that the participant pressed at that trial. It can be either the 1st bandit machine or the 2nd.\noutcome: making that choice either gave the participant one more unit of reward (1) or lose one unite of reward (-1)."
  },
  {
    "objectID": "index.html#the-rescorla-wagner-model",
    "href": "index.html#the-rescorla-wagner-model",
    "title": "Ham_blog",
    "section": "The Rescorla-Wagner Model",
    "text": "The Rescorla-Wagner Model\nThe Rescorla-Wagner model is the simplest computational model of reinforcement learning. There are so many variants of this simple model that incorporate other cognitive mechanisms but Rescorla-wagner model really sets the framework here. This model has 2 parameters: the learning rate A and the inverse temperature tau. The model assumes that the learning agent stores a value representation of each of the options (bandits). If by choosing an option, the agent gains a reward, then the value associated with that option increases by 1 times A. If the agent instead receives a loss, then the value associated will decrease by 1 times A or increase by -1 times A. Here learning rate A controls how sensitive is the agent to the incoming reward information. High learning rate A means the agent reacts really quickly to each new reward information. Thus the agent learns really quickly. While low learning rate A corresponds to an agent the learns more slowly. The values were initialized to be uniform.\nAt each trial, the agent choose each option according to the values of each option. The higher the value, the more likely the agent would choose it, corresponding to the process of reinforcement learning. The exactly probability distribution from which the choice is sampled is determined by applying the softmax function to the values. What softmax function does is nothing but converting an array of number that does sum up to 1, into an array of number that does. Softmax function can be thought of as a generalization of logistic function. In the case of a 2-armed bandit it exactly is equivalent to a logistic function. The softmax function takes in one parameter called inverse temperature. You may ask why inverse temperature. Because this softmax function originates in thermodynamics where people study temperature (sorry this is as much I know about thermodynamics haha). Higher temperature, things are noisier so behavior is more random. In the softmax function, higher the temperature (lower the inverse temperature), the more random the choice. In the extreme if the temperature is infinite (or the inverse temperature is 0), then the agent always just randomly choose an option, regardless of the learned value. On the contrary with low temperature ( an high inverse temperature), the agent always chooses the most rewarding option. The reason why the model takes in the inverse of temperature as a parameter is for numeric stability of calculation mostly.\nThese two parameter are not orthogonal and they are very much correlated. Let is consider extreme cases. If A = 0, then no matter what tau is, the agent always chooses randomly, because it does not update values and the value for each option remains the same (as initialized). If tau = 0. then the agent entirely ignores the values and also choose randomly always. Therefore from mere behavioral data one cannot tell if the agent has A=0 or tau=0. This correlation makes Bayesian fitting extra valuable because it entails that many pairs of A and tau could fit the data equally well. However, having crazy values of parameters do not really help interpretation. After all, these 2 parameters do capture different cognitive processes. A manefasts how sensitive is an agent to reward signals, whereas tau reveals overall how “exploratory” an agent is."
  },
  {
    "objectID": "index.html#fit-the-model-using-hbayesdm",
    "href": "index.html#fit-the-model-using-hbayesdm",
    "title": "Ham_blog",
    "section": "Fit the model using HBayesDM",
    "text": "Fit the model using HBayesDM\n\noutput = bandit2arm_delta(\n  data = \"example\", niter = 2000, nwarmup = 1000, nchain = 4, ncore = 4)\n\n\nModel name  = bandit2arm_delta \nData file   = example \n\nDetails:\n # of chains                    = 4 \n # of cores used                = 4 \n # of MCMC samples (per chain)  = 2000 \n # of burn-in samples           = 1000 \n # of subjects                  = 20 \n # of (max) trials per subject  = 100 \n\n\n****************************************\n** Use VB estimates as initial values **\n****************************************\nChain 1: ------------------------------------------------------------\nChain 1: EXPERIMENTAL ALGORITHM:\nChain 1:   This procedure has not been thoroughly tested and may be unstable\nChain 1:   or buggy. The interface is subject to change.\nChain 1: ------------------------------------------------------------\nChain 1: \nChain 1: \nChain 1: \nChain 1: Gradient evaluation took 0.000448 seconds\nChain 1: 1000 transitions using 10 leapfrog steps per transition would take 4.48 seconds.\nChain 1: Adjust your expectations accordingly!\nChain 1: \nChain 1: \nChain 1: Begin eta adaptation.\nChain 1: Iteration:   1 / 250 [  0%]  (Adaptation)\nChain 1: Iteration:  50 / 250 [ 20%]  (Adaptation)\nChain 1: Iteration: 100 / 250 [ 40%]  (Adaptation)\nChain 1: Iteration: 150 / 250 [ 60%]  (Adaptation)\nChain 1: Iteration: 200 / 250 [ 80%]  (Adaptation)\nChain 1: Success! Found best value [eta = 1] earlier than expected.\nChain 1: \nChain 1: Begin stochastic gradient ascent.\nChain 1:   iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes \nChain 1:    100        -1290.339             1.000            1.000\nChain 1:    200        -1286.238             0.502            1.000\nChain 1:    300        -1288.045             0.335            0.003   MEDIAN ELBO CONVERGED\nChain 1: \nChain 1: Drawing a sample of size 1000 from the approximate posterior... \nChain 1: COMPLETED.\n\n\nWarning: Pareto k diagnostic value is 1.06. Resampling is disabled. Decreasing\ntol_rel_obj may help if variational algorithm has terminated prematurely.\nOtherwise consider using sampling instead.\n\n\n\n************************************\n**** Model fitting is complete! ****\n************************************\n\n# Note: here I didn't set data=df because there is a bug in the package for the newest R version. It would have worked for R 4.1. This bug stil awaits to be fixed for the newest R version. But setting data=\"example\" does the same thing and used this example dataset.\n\nNow the model is fit! How simple! Just one line like fitting a regression model. Let us quick check if the model fitting worked.\n\nplot(output, type=\"trace\", fontSize=11)\n\n\n\n\nThe trace plot looked like catepillars! So the Bayesian fitted was decent. We can proceed to interpret the parameters."
  },
  {
    "objectID": "index.html#unpack-the-output",
    "href": "index.html#unpack-the-output",
    "title": "Ham_blog",
    "section": "Unpack the output",
    "text": "Unpack the output\nFirst, let us to at the fitted parameters. Below you see the fitted A and tau for each subject. The estimates are means of the posterior distribution.\n\noutput$allIndPars\n\n   subjID         A       tau\n1       1 0.3565507 0.7277897\n2       2 0.3471528 0.7585716\n3       3 0.3770616 0.6986166\n4       4 0.3696764 0.7525052\n5       5 0.3577484 0.7341837\n6       6 0.3493225 0.8530200\n7       7 0.3852313 1.0036932\n8       8 0.3845064 0.8064194\n9       9 0.3586722 0.8052998\n10     10 0.3693310 0.8603715\n11     11 0.3407506 0.9165505\n12     12 0.3759302 0.7801505\n13     13 0.3492000 0.8192475\n14     14 0.3521395 0.6533130\n15     15 0.3573339 0.8134559\n16     16 0.3383513 0.7925783\n17     17 0.3728687 0.9686200\n18     18 0.3424677 0.7096550\n19     19 0.3750180 0.8524178\n20     20 0.3859825 1.0088244\n\n\nIf you are interested in the detailed outcome of Bayesian fitting, you can run\n\noutput$fit\n\nInference for Stan model: anon_model.\n4 chains, each with iter=2000; warmup=1000; thin=1; \npost-warmup draws per chain=1000, total post-warmup draws=4000.\n\n                mean se_mean   sd     2.5%      25%      50%      75%    97.5%\nmu_A            0.36    0.00 0.06     0.26     0.32     0.36     0.40     0.48\nmu_tau          0.80    0.00 0.08     0.65     0.75     0.80     0.86     0.97\nsigma[1]        0.14    0.00 0.10     0.01     0.06     0.12     0.21     0.37\nsigma[2]        0.14    0.00 0.08     0.01     0.09     0.14     0.19     0.31\nA[1]            0.36    0.00 0.08     0.20     0.30     0.35     0.40     0.53\nA[2]            0.35    0.00 0.08     0.19     0.30     0.35     0.39     0.50\nA[3]            0.38    0.00 0.08     0.24     0.32     0.37     0.42     0.55\nA[4]            0.37    0.00 0.08     0.23     0.32     0.37     0.42     0.54\nA[5]            0.36    0.00 0.08     0.20     0.31     0.36     0.41     0.52\nA[6]            0.35    0.00 0.08     0.19     0.30     0.35     0.40     0.51\nA[7]            0.39    0.00 0.08     0.26     0.33     0.38     0.43     0.56\nA[8]            0.38    0.00 0.08     0.24     0.33     0.38     0.43     0.56\nA[9]            0.36    0.00 0.08     0.20     0.31     0.36     0.41     0.53\nA[10]           0.37    0.00 0.08     0.21     0.31     0.36     0.42     0.56\nA[11]           0.34    0.00 0.07     0.19     0.29     0.34     0.39     0.49\nA[12]           0.38    0.00 0.08     0.24     0.32     0.37     0.42     0.55\nA[13]           0.35    0.00 0.07     0.22     0.30     0.35     0.39     0.49\nA[14]           0.35    0.00 0.08     0.20     0.30     0.35     0.40     0.51\nA[15]           0.36    0.00 0.08     0.21     0.31     0.35     0.40     0.52\nA[16]           0.34    0.00 0.08     0.19     0.29     0.34     0.39     0.49\nA[17]           0.37    0.00 0.07     0.25     0.32     0.37     0.42     0.54\nA[18]           0.34    0.00 0.08     0.18     0.29     0.34     0.39     0.49\nA[19]           0.38    0.00 0.08     0.24     0.32     0.37     0.42     0.54\nA[20]           0.39    0.00 0.08     0.25     0.33     0.38     0.43     0.56\ntau[1]          0.73    0.00 0.15     0.43     0.64     0.74     0.82     1.00\ntau[2]          0.76    0.00 0.17     0.42     0.66     0.76     0.86     1.10\ntau[3]          0.70    0.00 0.14     0.40     0.60     0.71     0.80     0.96\ntau[4]          0.75    0.00 0.17     0.41     0.65     0.76     0.85     1.09\ntau[5]          0.73    0.00 0.16     0.41     0.63     0.74     0.83     1.05\ntau[6]          0.85    0.00 0.18     0.53     0.74     0.83     0.95     1.27\ntau[7]          1.00    0.00 0.21     0.68     0.85     0.97     1.13     1.49\ntau[8]          0.81    0.00 0.16     0.51     0.71     0.80     0.90     1.15\ntau[9]          0.81    0.00 0.16     0.49     0.71     0.80     0.90     1.15\ntau[10]         0.86    0.00 0.16     0.59     0.75     0.85     0.95     1.20\ntau[11]         0.92    0.00 0.18     0.61     0.79     0.89     1.02     1.33\ntau[12]         0.78    0.00 0.13     0.52     0.70     0.78     0.86     1.06\ntau[13]         0.82    0.00 0.17     0.51     0.71     0.81     0.91     1.20\ntau[14]         0.65    0.00 0.15     0.35     0.55     0.66     0.77     0.93\ntau[15]         0.81    0.00 0.18     0.47     0.71     0.80     0.91     1.23\ntau[16]         0.79    0.00 0.15     0.49     0.70     0.79     0.89     1.12\ntau[17]         0.97    0.00 0.21     0.66     0.82     0.93     1.09     1.44\ntau[18]         0.71    0.00 0.16     0.38     0.60     0.72     0.82     1.01\ntau[19]         0.85    0.00 0.17     0.55     0.74     0.84     0.95     1.25\ntau[20]         1.01    0.01 0.26     0.65     0.82     0.96     1.15     1.63\nlog_lik[1]    -66.17    0.01 0.46   -67.42   -66.35   -66.03   -65.84   -65.72\nlog_lik[2]    -67.44    0.01 0.44   -68.60   -67.59   -67.32   -67.14   -66.99\nlog_lik[3]    -67.07    0.01 0.73   -68.70   -67.48   -66.98   -66.56   -65.94\nlog_lik[4]    -68.01    0.01 0.44   -69.09   -68.22   -67.93   -67.70   -67.39\nlog_lik[5]    -67.41    0.01 0.43   -68.48   -67.56   -67.29   -67.12   -66.97\nlog_lik[6]    -63.86    0.01 0.47   -64.89   -64.11   -63.83   -63.56   -63.03\nlog_lik[7]    -53.84    0.02 1.10   -56.34   -54.59   -53.68   -52.94   -52.30\nlog_lik[8]    -64.79    0.01 0.56   -66.02   -65.16   -64.75   -64.39   -63.84\nlog_lik[9]    -64.84    0.01 0.31   -65.72   -64.89   -64.74   -64.68   -64.61\nlog_lik[10]   -59.03    0.01 0.41   -60.12   -59.16   -58.90   -58.78   -58.58\nlog_lik[11]   -57.92    0.02 0.87   -59.85   -58.42   -57.85   -57.32   -56.41\nlog_lik[12]   -60.91    0.01 0.48   -62.21   -61.10   -60.79   -60.59   -60.35\nlog_lik[13]   -64.89    0.01 0.44   -65.98   -65.09   -64.79   -64.58   -64.40\nlog_lik[14]   -68.87    0.02 0.96   -71.02   -69.53   -68.70   -68.08   -67.63\nlog_lik[15]   -66.28    0.00 0.24   -66.94   -66.34   -66.21   -66.15   -66.03\nlog_lik[16]   -64.06    0.01 0.62   -65.43   -64.43   -64.00   -63.61   -63.05\nlog_lik[17]   -56.32    0.02 0.87   -58.25   -56.90   -56.20   -55.58   -55.16\nlog_lik[18]   -68.99    0.01 0.64   -70.53   -69.34   -68.86   -68.49   -68.15\nlog_lik[19]   -62.63    0.01 0.44   -63.81   -62.81   -62.51   -62.32   -62.17\nlog_lik[20]   -60.34    0.02 1.12   -62.58   -61.14   -60.31   -59.46   -58.44\nlp__        -1299.13    0.17 5.78 -1311.17 -1303.00 -1298.94 -1294.81 -1288.84\n            n_eff Rhat\nmu_A         3602 1.00\nmu_tau       3060 1.00\nsigma[1]     2434 1.00\nsigma[2]     1302 1.00\nA[1]         4363 1.00\nA[2]         4296 1.00\nA[3]         4095 1.00\nA[4]         4610 1.00\nA[5]         4049 1.00\nA[6]         4428 1.00\nA[7]         3824 1.00\nA[8]         4153 1.00\nA[9]         4164 1.00\nA[10]        4125 1.00\nA[11]        3839 1.00\nA[12]        4948 1.00\nA[13]        4283 1.00\nA[14]        4160 1.00\nA[15]        4425 1.00\nA[16]        3569 1.00\nA[17]        4397 1.00\nA[18]        4264 1.00\nA[19]        4276 1.00\nA[20]        4792 1.00\ntau[1]       3904 1.00\ntau[2]       4239 1.00\ntau[3]       3268 1.00\ntau[4]       3997 1.00\ntau[5]       4245 1.00\ntau[6]       4173 1.00\ntau[7]       2582 1.00\ntau[8]       5379 1.00\ntau[9]       5370 1.00\ntau[10]      5138 1.00\ntau[11]      3281 1.00\ntau[12]      6106 1.00\ntau[13]      4820 1.00\ntau[14]      2788 1.00\ntau[15]      4192 1.00\ntau[16]      4166 1.00\ntau[17]      3057 1.00\ntau[18]      3353 1.00\ntau[19]      4947 1.00\ntau[20]      2487 1.00\nlog_lik[1]   3933 1.00\nlog_lik[2]   4090 1.00\nlog_lik[3]   3098 1.00\nlog_lik[4]   3147 1.00\nlog_lik[5]   3388 1.00\nlog_lik[6]   3206 1.00\nlog_lik[7]   2067 1.00\nlog_lik[8]   3442 1.00\nlog_lik[9]   2397 1.00\nlog_lik[10]  2874 1.00\nlog_lik[11]  2947 1.00\nlog_lik[12]  2684 1.00\nlog_lik[13]  2889 1.00\nlog_lik[14]  2676 1.00\nlog_lik[15]  2935 1.00\nlog_lik[16]  3112 1.00\nlog_lik[17]  2578 1.00\nlog_lik[18]  4254 1.00\nlog_lik[19]  3271 1.00\nlog_lik[20]  2255 1.00\nlp__         1156 1.01\n\nSamples were drawn using NUTS(diag_e) at Fri May  3 23:19:38 2024.\nFor each parameter, n_eff is a crude measure of effective sample size,\nand Rhat is the potential scale reduction factor on split chains (at \nconvergence, Rhat=1).\n\n\nThis gives you the summary of full posterior distribution of each random variable in the Bayesian hierarchical model. If you are only interested in the point estimate of the parameters, you can just go with output$allIndPars. Let us visualize the fitted parameters. HBayesDM comes with a easy plot function as well!\n\nplot(output)\n\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\nℹ The deprecated feature was likely used in the hBayesDM package.\n  Please report the issue at &lt;https://github.com/CCS-Lab/hBayesDM/issues&gt;.\n\n\n\n\n\nIf you want to visualize the full posterior for each participant you can also do that:\n\nplotInd(output, \"A\")\n\nci_level: 0.8 (80% intervals)\n\n\nouter_level: 0.95 (95% intervals)\n\n\n\n\n\n\nplotInd(output, \"tau\")\n\nci_level: 0.8 (80% intervals)\n\n\nouter_level: 0.95 (95% intervals)\n\n\n\n\n\nHowever, if you want to compare the overall parameter fit of a group of participant and compare it with another group of participant, you can directly compare the posterior of the mean. This could be useful for example in computational psychiatry, researchers may be interested in comparing the learning rate between people with depression and neurotypical people. Because we only have one example dataset, let us just compare this 20 subjects in our example data to itself, just for the sake of demonstrating the code.\n\n#for the learning rate \ndiffDist = output$parVals$mu_A - output$parVals$mu_A\nHDIofMCMC( diffDist ) # get the 95% density interval\n\n[1] 0 0\n\nplotHDI( diffDist ) # plot the differences of the group mean\n\n[1] \"95% Highest Density Interval (HDI):\"\n[1] \"Lower bound = 0, Upper bound = 0\"\n\n\nWarning in geom_segment(aes(x = HDI[1], y = 0, xend = HDI[2], yend = 0), : All aesthetics have length 1, but the data has 4000 rows.\nℹ Did you mean to use `annotate()`?\n\n\n\n\n\n\n#for the inverse temperature\ndiffDist = output$parVals$mu_tau - output$parVals$mu_tau\nHDIofMCMC( diffDist ) # get the 95% density interval\n\n[1] 0 0\n\nplotHDI( diffDist ) # plot the differences of the group mean\n\n[1] \"95% Highest Density Interval (HDI):\"\n[1] \"Lower bound = 0, Upper bound = 0\"\n\n\nWarning in geom_segment(aes(x = HDI[1], y = 0, xend = HDI[2], yend = 0), : All aesthetics have length 1, but the data has 4000 rows.\nℹ Did you mean to use `annotate()`?\n\n\n\n\n\nYou may wonder, why do we have parameter fits to each individual subject AND a parameter fit to the entire sample? This is akin to the hierarchical modeling in general linear regression (or mixed-effects modeling). In fact, the framework is exactly the same. You could fit the hierarchical models in a Bayesian we as well using brms package. The mu_[parameter] you get from the model fit is analogous of the fixed-effects and the individual fits are analogous to the random effects. However, some papers also just ignore the mean group estimates and instead just average the individual fits and treat those as point estimates, similar to what you would do in frequentist model-fitting. Both ways are probably more or less equivalent. Since HBayesDM already nicely give you this posterior group mean estimates, why not just use it? This concludes my blog that introduces you to how to fit a simple reinforcement learning model using HBayesDM. This package as a rich repertoire of other common computational models in learning and decision-making, and the usage should be more or less the same. However, if your work requires you to build a novel model that doesn’t exist in this repertoire, HBayesDM may not work for you. For example, if you are interested in combining this reinforcement learning model with a utility function, you may need to write up your own model. Nevertheless, HBayesDM is still a powerful package for research that mainly wants to leverage these tasks and computational models as tools or in other words, statistical models, to examine questions in social, clinical, or model-based cognitive neuroscience. It makes the outputs of research in computational modeling much more accessible to a wide range of researchers."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]